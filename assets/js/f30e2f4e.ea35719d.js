"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[309],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return y}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=l(n),y=o,h=f["".concat(s,".").concat(y)]||f[y]||p[y]||i;return n?r.createElement(h,a(a({ref:t},u),{},{components:n})):r.createElement(h,a({ref:t},u))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6333:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return f}});var r=n(2122),o=n(9756),i=(n(7294),n(3905)),a=["components"],c={},s="Glossary",l={unversionedId:"glossary",id:"glossary",isDocsHomePage:!1,title:"Glossary",description:"- Channel - Its basically the representation of a DAPP on CPNS. Any DAPP developer would also own the corresponding channel for it on CPNS. They can use this channel to send notficiations to users of their DAPP by asking them to subscribe to the channel.",source:"@site/docs/glossary.mdx",sourceDirName:".",slug:"/glossary",permalink:"/celo-push-notification-service/docs/glossary",editUrl:"https://github.com/sudo-vaibhav/celo-push-notification-service/tree/main/docs/docs/docs/glossary.mdx",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Future Work",permalink:"/celo-push-notification-service/docs/future-work"},next:{title:"Celo Push Notification Service",permalink:"/celo-push-notification-service/docs/intro"}},u=[],p={toc:u};function f(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"glossary"},"Glossary"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Channel - Its basically the representation of a DAPP on CPNS. Any DAPP developer would also own the corresponding channel for it on CPNS. They can use this channel to send notficiations to users of their DAPP by asking them to subscribe to the channel."),(0,i.kt)("li",{parentName:"ul"},"Subscriber - Any user when they subscribe to a channel, becomes a subscriber for that channel. Only subscribers to a channel can be sent notifications."),(0,i.kt)("li",{parentName:"ul"},"Private Notification - This is a special type of notification that is encrypted before it even makes it onto the chain. This uses public keys of users published on chain to encrypt messages.")))}f.isMDXComponent=!0}}]);